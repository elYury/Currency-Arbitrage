Psudocode for Currency-Arbitrage

        PREPARATION

Find which exchanges are reputable with reasonable fees
Create exchange accounts & crypto wallets
Method to sort which cryptos hold most oportunities by market cap/ volatility or else
APIs for price and order book data
Listing prices and comparing it across exchanges
Fee list for transfers, market orders, transactions etc...
Time needed for every step of the transaction
Eth gas fee updated and included in fee calculations
Calculate position size based on order book liquidity


        STEP 1

Look at all the crypto pairs worth considering and fetch their market price by exchange in a table
Compare highest and lowest price from same pair accross exchanges
Determine minimum % difference to execute Arbitrage
Calculate ammount of time needed for whole operation and maximum time to accept.


        STEP 2

If % is enough : Get order books for buying on the lowest price pair and for selling on the highest price pair
Determine correct position size based on available liquidity and their respective prices
Calculate buying position price and value. Calculate selling position price and value.
Calculate eth gas fees
Calculate transfer, buying, selling and withdrawal fees.
Calculate total cost of operating and total gain after fees.
Determine if gain is enough.


        STEP 3
Print operation's data overview ( sum of all the previously calculated information in a concise manner )


        STEP4
Execute on the whole operation and report final gain and time after completion


        STEP 5

Determine if its worth it to redo arbitrage with other exchanges involved



















(each x amount of time) x will depend on the max times we can call the APIs (we need to reserve some API calls for the order books)
first we need to upload the data with an API
    for each crypto exchange

we need to sort the data based on market cap and only look at USDT pairs
    marketcap: <10,000,000 && > y

we will put this data into dictionaries the key being exchange (ex. Binance) and the value being the crypto price BTC/USDT (14,234)
    we will have a separate dictionary for each crypto
    [there are some challenges here we need to work out]

we need to decide if a liner search is good enough for speed, or we are gonna need something faster on the base of O(logN), like a tree

we will compare the prices inside each dictionary and if deviates by Z (ex. 1%), we can call the API again for the order book

we look at the order book for sells and for buys to decide how many coins we will buy, and then sell on the other exchange

we transfer funds from the main wallet to the first exchange

buy the coins

transfer them to the other exchange 

sell the coins

transfer the USDT back to the main wallet

---------------------------------------------------------------------------

*issues: 

-if we cannot afford to keep atleast 3.5kUSDT in each exchange (obviously we cannot), 
we will pay 3 transfer/withdraw fees for each trade (not counting comissions)

-We need a way to estimate the time it will take to transfer the funds, and maybe not take trades that take ex. 20min

resources:

lib for scanning market 24/7
https://tutorialedge.net/python/concurrency/asyncio-event-loops-tutorial/




